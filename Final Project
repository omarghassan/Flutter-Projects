main.dart file
-------------------------------------------------------------------
-------------------------------------------------------------------
import 'package:final_project/pages/add_book.dart';
import 'package:final_project/pages/book_list.dart';
import 'package:final_project/pages/home_page.dart';
import 'package:flutter/material.dart';
import 'Models/book.dart';
import 'pages/login_page.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.orange,
      ),
      
      
      initialRoute: HomePage.routeName,
      routes: {
        HomePage.routeName: (context) => const HomePage(),
        AddBook.routeName:(context) => AddBook(),
        "LoginPage:":(context) => const LoginPage(),
        "ListPage":(context) => BookList(booksToGenerate: Book.generateData(10))
        
      },
      debugShowCheckedModeBanner: false,
    );
  }
}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

book.dart file
-------------------------------------------------------------------
-------------------------------------------------------------------
import 'dart:math';

enum BookStatus {
  notSelected,
  available,
  outOfStock,
}

class Book {

  late int id;
  late String title;
  late double price;
  late bool isBorrowed;
  late String bookCover;
  late BookStatus bookStatus;

  static final List<Book> _books = [];

  Book();

  Book._({this.id = -1, this.title = "", this.price = 5, this.bookCover = "",this.isBorrowed = false}); 

  static List<Book> generateData (int bookCount) {
    
    for (int i = 1; i <= bookCount; i++) {

      double priceRandom = Random().nextDouble() * 100;
      priceRandom = double.parse((priceRandom).toStringAsFixed(2));
      _books.add(
        Book._(
          id: i,
          title: "Book $i",
          price: priceRandom,
          isBorrowed: (priceRandom % 2 == 0) ? true : false,
          bookCover: "images/bookcover.png"
        )
      );
    }

    return _books;
  }

  static Book getNew({String name = "", double price = 35}) {
    return Book._(id: _books.length+1, title: name, price: price, bookCover: "images/bookcover.png");
  }

}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

home_page.dart file
-------------------------------------------------------------------
-------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'list_page.dart';

class HomePage extends StatefulWidget {
  static const String title ='Home Page';
  static const String routeName ='/';

  const HomePage({ Key? key }) : super(key: key);

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(HomePage.title),
      ),
      body: Padding(
        padding: const EdgeInsets.only(top:100.0),
        child: Column(
          children:const [
            Image(image: AssetImage('images/university-icon.jpg'),width: 500),
             Center(
              child: Text(
                'University', 
                style: TextStyle(
                  fontSize: 30, 
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Tahoma',
                  ),
                  )
                  ),
          ],
        ),
      ),
      
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.red,
                image: DecorationImage(
                  image: AssetImage("images/drawerbackground.jpg"),
                     fit: BoxFit.cover),
                     ),
              child: Text('Student List', 
              style: TextStyle(fontSize: 20, color: Colors.white),
              ),
            ),
            ListTile(
              title: const Text(ListPage.title),
              onTap: (){
                Navigator.pushNamed(context, ListPage.routeName);
              },
              ),

              ListTile(
              title: const Text('Exit App'),
              onTap: (){
                SystemNavigator.pop();
              },
              )
          ],
        ),
      ),
    );
  }
}

-------------------------------------------------------------------
-------------------------------------------------------------------

list_page.dart


import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'add.dart';
import 'edit.dart';
import 'home_page.dart';
import 'dart:math';

List<Student> studentsList = [];

 List<Student> gerateRandomData(int count){
      
      for(int i = 1; i <= count; i++)
      {
        int gpaRandom = 35 + Random().nextInt(100 - 35);
        double ageRandom = Random().nextDouble() * max(18,40);
        studentsList.add(
          Student(
            age: ageRandom,
            id: i,
            name: "Student $i", 
            gpa: gpaRandom,
            imageUrl: gpaRandom % 2 == 0 ? 'images/student1.jpg' : 'images/student2.png',
            ),
        );
      }

      return studentsList;
      
    }

class Student{
  int id;
  String name;
  int gpa;
  String imageUrl;
  double age;



  Student(
    {this.id = -1, this.name = "", this.gpa = 35, this.imageUrl = "", this.age=18}
    );

     static Student getDefaultStudent() {
    return Student(id: -1, name: '', gpa: 35,age: 18);
  }
}

class ListPage extends StatefulWidget {
  static const String title ='List Page';
  static const String routeName ='/listpage';
  //final Messenger messenger = Messenger(message: 'Hi :)');

  const ListPage({ Key? key}) : super(key: key);

  @override
  State<ListPage> createState() => _ListPageState();
}

class _ListPageState extends State<ListPage> {

  @override
  void initState() {
    super.initState();
    gerateRandomData(5);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(ListPage.title),
      ),
      body: ListView.builder(
      itemCount: studentsList.length,
      itemExtent: 90,
      itemBuilder: _listItemBuilder,
         ),
          

          drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget> [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.red,
                image: DecorationImage(
                  image: AssetImage("images/drawerbackground.jpg"),
                     fit: BoxFit.cover)
                ),
              child: Text('Student List', 
              style: TextStyle(fontSize: 20, color: Colors.white),
              ),
            ),
            ListTile(
              title: const Text(HomePage.title),
              onTap: (){
                Navigator.pushNamed(context, HomePage.routeName);
              },
              ),

              ListTile(
              title: const Text('Exit App'),
              onTap: (){
                SystemNavigator.pop();
              },
              )
          ],
        ),
      ),
      
          floatingActionButton: FloatingActionButton(
            child: const Icon(Icons.add_reaction,color: Colors.white,size: 40,),
            backgroundColor: Colors.black,
            tooltip: 'Add',
            onPressed: (){
              _addStudent(context);
            },
            ),

            
            floatingActionButtonLocation:
              FloatingActionButtonLocation.centerDocked,
  
          bottomNavigationBar: BottomAppBar(
            color: Colors.blue,
            child: Container(height: 50.0),
            ),

            
    );
  } 

  Widget _listItemBuilder(BuildContext context, int index) {
    Student student = studentsList[index];
    return Dismissible(
      child: _getStudentCard(context, index),
      key: UniqueKey(),
      onDismissed: (direction) {
        setState(() {
          if (direction == DismissDirection.startToEnd) {
            showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete'),
        content: Column(
          children: [
            const Text("Are you sure you want to delete?"),
            const Text(''),
            Text('Name:\t${student.name}'),
            const Text(''),
            const Text('Image:'),
            Image(
              image: AssetImage(student.imageUrl),
              fit: BoxFit.scaleDown,
            ),
          ],
        ),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              _editStudent(context , student);
            },
            child: const Text('Edit'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context, false);
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              studentsList.remove(student);
              setState(() {
                
              });
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('${student.name} is dismissed!'),
              ),
            );
            Navigator.pop(context, true);
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );

          } 
          
          else if (direction == DismissDirection.endToStart) {
            if (index > 0) {
              studentsList.remove(student);
              studentsList.insert(index - 1, student);
            }
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Dismiss Direction is $direction!'),
              ),
            );
          }
        });
      },
    );
  }

  Widget _getStudentCard(BuildContext context, int index) {
    double newScale = 0;
    return GestureDetector(
      onScaleStart: (details) {
          newScale = 0;
      },
      onScaleUpdate: (details) {
        newScale = details.scale;
      },
      onScaleEnd: (details) {
        setState(() {
          if (newScale > 1) {
            _addNewStudent(studentsList[index]);
          }
        });
      },
      //onLongPress: () => _showDetails(context, student),
      onLongPress: () => _editStudent(context , studentsList[index]),
      child: Container(
        padding: const EdgeInsets.only(left: 15, right: 15,top: 5,bottom: 5),
        alignment: Alignment.centerLeft,
        child: Card(
          shadowColor: Colors.blue,
          elevation: 10,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
            side: BorderSide(color: Theme.of(context).colorScheme.primary),
          ),
          child: Row(
            children: [
              Image(
                image: AssetImage(studentsList[index].imageUrl),
                fit: BoxFit.scaleDown,
              ),
              Column(
                children: [
                  Text(
                    studentsList[index].name,
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  Text(
                    'GPA: ${ studentsList[index].gpa}',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  Text(
                    'Age: ${ studentsList[index]..age}',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  void _addNewStudent(Student student) {
    int i = studentsList.indexWhere((s) => s.id == student.id);
    if (i > -1) {
      int newGpa = 35 + Random().nextInt(100 - 35);
      double newAge = Random().nextDouble() * max(18, 40);
      int newId = studentsList.length + 1;
      String newUrl = newGpa % 2 == 0 ? "images/student1.jpg"  : "images/student2.png";
      Student s = Student(
        age: newAge,
        id: newId,
        name: 'Student $newId',
        gpa: newGpa,
        imageUrl: newUrl,
      );
      studentsList.insert(i, s);
    }
  }

  Future<void> _editStudent(BuildContext context , Student student) async {
  await Navigator.pushNamed(context, Edit.routeName,arguments: student);
  setState(() {
  });
  }

  Future<void> _addStudent(BuildContext context) async {
  await Navigator.pushNamed(context, Add.routeName);
  setState(() {
  });
  }

}


////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

add.dart file
-------------------------------------------------------------------
-------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'list_page.dart';

class Add extends StatefulWidget {
  final String title;
  static const String routeName ='/add';

  const Add({ Key? key, required this.title }) : super(key: key);

  @override
  State<Add> createState() => _AddState();
}

class _AddState extends State<Add> {
  
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final Student student = Student ();

  @override
  Widget build(BuildContext context) {
    //final Student student =
    //   ModalRoute.of(context)!.settings.arguments as Student;
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(10),
          child: Center(
            child: Form(
              key: _formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.name;
                      },
                      initialValue: student.name,
                      keyboardType: TextInputType.name,
                      decoration: const InputDecoration(
                        labelText: 'Name',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.account_circle,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        if (newValue!.isEmpty || newValue.trim().length < 3) {
                          return 'Name is required, and it should be 3 characters at least!';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        student.name = newValue!;
                        //newStudentName(newValue!);// = newValue!;
                      },
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.gpa;
                      },
                      initialValue: student.gpa.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'GPA',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.calculate,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        double value = double.tryParse(newValue!)?? 0; 
                        if (value < 35 || value > 100 ) {
                          return 'GPA should be bigger than 35 and less than 100 ';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        double value = double.tryParse(newValue!)?? 0;
                        student.gpa = value.toInt();
                      },
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.age;
                      },
                      initialValue: student.age.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Age',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.date_range,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        double value = double.tryParse(newValue!)?? 0; 
                        if (value < 18 || value > 40 ) {
                          return 'Age should be bigger than 18 and less than 40 ';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        double value = double.tryParse(newValue!)?? 0;
                        student.age = value.toDouble();
                      },
                    ),
                  ),
                  ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          _formKey.currentState!.save();
                          studentsList.add(student);
                          if(student.gpa % 2 == 0){
                            student.imageUrl= 'images/student1.jpg'; 
                          }
                          else {
                            student.imageUrl = 'images/student2.png'; 
                          }
                          Navigator.pop(context, student);
                        }
                      },
                      child: const Text('Save')
                      
                      ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
/*
  void newStudentName(String newName){
    String newName1;
    newName1 = newName ; 
    


  }

  void _addNewStudent(Student student) {
    int i = widget._students.indexWhere((s) => s.id == student.id);
    if (i > -1) {
      int newGpa = 35 + Random().nextInt(100 - 35);
      int newId = widget._students.length + 1;
      String newUrl = newGpa % 2 == 0 ? "images/student1.jpg"  : "images/student2.png";
      Student s = Student(
        id: newId,
        name: 'Student $newId',
        gpa: newGpa,
        imageUrl: newUrl,
      );
      widget._students.insert(i, s);
    }
  }
  */
}



import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'add.dart';
import 'edit.dart';
import 'home_page.dart';
import 'dart:math';

List<Student> studentsList = [];

 List<Student> gerateRandomData(int count){
      
      for(int i = 1; i <= count; i++)
      {
        int gpaRandom = 35 + Random().nextInt(100 - 35);
        double ageRandom = Random().nextDouble() * max(18,40);
        studentsList.add(
          Student(
            age: ageRandom,
            id: i,
            name: "Student $i", 
            gpa: gpaRandom,
            imageUrl: gpaRandom % 2 == 0 ? 'images/student1.jpg' : 'images/student2.png',
            ),
        );
      }

      return studentsList;
      
    }

class Student{
  int id;
  String name;
  int gpa;
  String imageUrl;
  double age;



  Student(
    {this.id = -1, this.name = "", this.gpa = 35, this.imageUrl = "", this.age=18}
    );

     static Student getDefaultStudent() {
    return Student(id: -1, name: '', gpa: 35,age: 18);
  }
}

class ListPage extends StatefulWidget {
  static const String title ='List Page';
  static const String routeName ='/listpage';
  //final Messenger messenger = Messenger(message: 'Hi :)');

  const ListPage({ Key? key}) : super(key: key);

  @override
  State<ListPage> createState() => _ListPageState();
}

class _ListPageState extends State<ListPage> {

  @override
  void initState() {
    super.initState();
    gerateRandomData(5);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(ListPage.title),
      ),
      body: ListView.builder(
      itemCount: studentsList.length,
      itemExtent: 90,
      itemBuilder: _listItemBuilder,
         ),
          

          drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget> [
            const DrawerHeader(
              decoration: BoxDecoration(
                color: Colors.red,
                image: DecorationImage(
                  image: AssetImage("images/drawerbackground.jpg"),
                     fit: BoxFit.cover)
                ),
              child: Text('Student List', 
              style: TextStyle(fontSize: 20, color: Colors.white),
              ),
            ),
            ListTile(
              title: const Text(HomePage.title),
              onTap: (){
                Navigator.pushNamed(context, HomePage.routeName);
              },
              ),

              ListTile(
              title: const Text('Exit App'),
              onTap: (){
                SystemNavigator.pop();
              },
              )
          ],
        ),
      ),
      
          floatingActionButton: FloatingActionButton(
            child: const Icon(Icons.add_reaction,color: Colors.white,size: 40,),
            backgroundColor: Colors.black,
            tooltip: 'Add',
            onPressed: (){
              _addStudent(context);
            },
            ),

            
            floatingActionButtonLocation:
              FloatingActionButtonLocation.centerDocked,
  
          bottomNavigationBar: BottomAppBar(
            color: Colors.blue,
            child: Container(height: 50.0),
            ),

            
    );
  } 

  Widget _listItemBuilder(BuildContext context, int index) {
    Student student = studentsList[index];
    return Dismissible(
      child: _getStudentCard(context, index),
      key: UniqueKey(),
      onDismissed: (direction) {
        setState(() {
          if (direction == DismissDirection.startToEnd) {
            showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete'),
        content: Column(
          children: [
            const Text("Are you sure you want to delete?"),
            const Text(''),
            Text('Name:\t${student.name}'),
            const Text(''),
            const Text('Image:'),
            Image(
              image: AssetImage(student.imageUrl),
              fit: BoxFit.scaleDown,
            ),
          ],
        ),
        actions: <Widget>[
          TextButton(
            onPressed: () {
              _editStudent(context , student);
            },
            child: const Text('Edit'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context, false);
            },
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              studentsList.remove(student);
              setState(() {
                
              });
            
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('${student.name} is dismissed!'),
              ),
            );
            Navigator.pop(context, true);
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );

          } 
          
          else if (direction == DismissDirection.endToStart) {
            if (index > 0) {
              studentsList.remove(student);
              studentsList.insert(index - 1, student);
            }
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Dismiss Direction is $direction!'),
              ),
            );
          }
        });
      },
    );
  }

  Widget _getStudentCard(BuildContext context, int index) {
    double newScale = 0;
    return GestureDetector(
      onScaleStart: (details) {
          newScale = 0;
      },
      onScaleUpdate: (details) {
        newScale = details.scale;
      },
      onScaleEnd: (details) {
        setState(() {
          if (newScale > 1) {
            _addNewStudent(studentsList[index]);
          }
        });
      },
      //onLongPress: () => _showDetails(context, student),
      onLongPress: () => _editStudent(context , studentsList[index]),
      child: Container(
        padding: const EdgeInsets.only(left: 15, right: 15,top: 5,bottom: 5),
        alignment: Alignment.centerLeft,
        child: Card(
          shadowColor: Colors.blue,
          elevation: 10,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
            side: BorderSide(color: Theme.of(context).colorScheme.primary),
          ),
          child: Row(
            children: [
              Image(
                image: AssetImage(studentsList[index].imageUrl),
                fit: BoxFit.scaleDown,
              ),
              Column(
                children: [
                  Text(
                    studentsList[index].name,
                    style: Theme.of(context).textTheme.headlineSmall,
                  ),
                  Text(
                    'GPA: ${ studentsList[index].gpa}',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  Text(
                    'Age: ${ studentsList[index]..age}',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
  
  void _addNewStudent(Student student) {
    int i = studentsList.indexWhere((s) => s.id == student.id);
    if (i > -1) {
      int newGpa = 35 + Random().nextInt(100 - 35);
      double newAge = Random().nextDouble() * max(18, 40);
      int newId = studentsList.length + 1;
      String newUrl = newGpa % 2 == 0 ? "images/student1.jpg"  : "images/student2.png";
      Student s = Student(
        age: newAge,
        id: newId,
        name: 'Student $newId',
        gpa: newGpa,
        imageUrl: newUrl,
      );
      studentsList.insert(i, s);
    }
  }

  Future<void> _editStudent(BuildContext context , Student student) async {
  await Navigator.pushNamed(context, Edit.routeName,arguments: student);
  setState(() {
  });
  }

  Future<void> _addStudent(BuildContext context) async {
  await Navigator.pushNamed(context, Add.routeName);
  setState(() {
  });
  }

}

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

edit.dart file
-------------------------------------------------------------------
-------------------------------------------------------------------
import 'package:flutter/material.dart';
import 'list_page.dart';

class Edit extends StatefulWidget {
  final String title;
  static const String routeName ='/edit';

  const Edit({ Key? key, required this.title }) : super(key: key);

  @override
  State<Edit> createState() => _EditState();
}

class _EditState extends State<Edit> {
  
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    final Student student =
        ModalRoute.of(context)!.settings.arguments as Student;

      
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(10),
          child: Center(
            child: Form(
              key: _formKey,
              autovalidateMode: AutovalidateMode.onUserInteraction,
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.name = value;
                      },
                      initialValue: student.name,
                      keyboardType: TextInputType.name,
                      decoration: const InputDecoration(
                        labelText: 'Name',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.account_circle,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        if (newValue!.isEmpty || newValue.trim().length < 3) {
                          return 'Name is required, and it should be 3 characters at least!';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        student.name = newValue!;
                        //newStudentName(newValue!);// = newValue!;
                      },
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.gpa;
                      },
                      initialValue: student.gpa.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'GPA',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.calculate,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        double value = double.tryParse(newValue!)?? 0; 
                        if (value < 35 || value > 100 ) {
                          return 'GPA should be bigger than 35 and less than 100 ';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        double value = double.tryParse(newValue!)?? 0;
                        student.gpa = value.toInt();
                      },
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: TextFormField(
                      onChanged: (value) {
                        student.age;
                      },
                      initialValue: student.age.toString(),
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Age',
                        helperText: '* Required',
                        enabledBorder: OutlineInputBorder(),
                        prefixIcon: Icon(
                          Icons.date_range,
                          color: Colors.black,
                          size: 30,),
                      ),
                      validator: (newValue) {
                        double value = double.tryParse(newValue!)?? 0; 
                        if (value < 18 || value > 40 ) {
                          return 'Age should be bigger than 18 and less than 40 ';
                        }
                        return null;
                      },
                      onSaved: (newValue) {
                        double value = double.tryParse(newValue!)?? 0;
                        student.age = value.toDouble();
                      },
                    ),
                  ),
                  ElevatedButton(
                      onPressed: () {
                        if (_formKey.currentState!.validate()) {
                          _formKey.currentState!.save();
                          if(student.gpa % 2 == 0){
                            student.imageUrl= 'images/student1.jpg'; 
                          }
                          else {
                            student.imageUrl = 'images/student2.png'; 
                          }
                          Navigator.pop(context, student);
                        }
                      },
                      child: const Text('Save')
                      
                      ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
/*
  void newStudentName(String newName){
    String newName1;
    newName1 = newName ; 
    


  }

  void _addNewStudent(Student student) {
    int i = widget._students.indexWhere((s) => s.id == student.id);
    if (i > -1) {
      int newGpa = 35 + Random().nextInt(100 - 35);
      int newId = widget._students.length + 1;
      String newUrl = newGpa % 2 == 0 ? "images/student1.jpg"  : "images/student2.png";
      Student s = Student(
        id: newId,
        name: 'Student $newId',
        gpa: newGpa,
        imageUrl: newUrl,
      );
      widget._students.insert(i, s);
    }
  }
  */
}
